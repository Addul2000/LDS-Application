#!/usr/bin/env python
# coding: utf-8

# # <center>L2 Computational Physics</center>
# ---
# 
# ## Week 5: Monte Carlo Methods
# 
# In this notebook, you will simulate a system with of three nuclei $A$, $B$ and $C$ where $A$ decays into $B$ and $B$ decays into $C$. If exposed to a neutron flux nucleus $C$ can be activated into a nucleus $A$. 

# In[1]:


import numpy
from matplotlib import pyplot as plt
import random


# Implement a function that tells whether a transition has occured, based on the transition probability and a random number. Use the random number `r` from `random.random()` and use the procedure described in the notes so that the checks can work in a reproducible way.

# In[2]:


def has_transitioned(prob):
    r = random.random()
    return r < prob
        


# In[3]:


# this test is worth 1 mark
random.seed(9867)
assert [ has_transitioned(0.5) for i in range(10)] == [False, False, True, False, False, False, False, True, False, True]


# We are going to keep track of the state of the atoms using a either `'A'`, `'B'` or `'C'` for each nucleus. For example 
# ```python
# state = ['A', 'A', 'B', 'A', 'C']
# ```
# 
# We will capture the possible physical reaction in a list of allowed transitions such as
# 
# `('A', 'B', 0.25 )`
# 
# where the first element is the initial state, the second element is the final state of the transition and its probability in the time interval considered is the third argument.
# 
# Define a function that takes as arguments the current state and a list of such transition rules and implements the transition (or not) and returns the new state

# In[4]:


def evolveOne(currentState, rules):
    
    initial_state1 = rules[0][0]
    final_state1 = rules[0][1]
    prob1 = rules[0][2]
    initial_state2 = rules[1][0]
    final_state2 = rules[1][1]
    prob2 = rules[1][2]
        
    if currentState == initial_state1:
        if has_transitioned(prob1):
            return final_state1
        else:
            return initial_state1
    elif currentState == initial_state2:
        if has_transitioned(prob2):
            return final_state2
        else:
            return initial_state2
    else:
        return currentState


# In[5]:


# these tests are worth 1 mark
alwaysDecayRules = [
    ('A', 'B', 1.0),
    ('B', 'C', 1.0)
]
assert evolveOne('A', alwaysDecayRules) == 'B'
assert evolveOne('B', alwaysDecayRules) == 'C'


# In[6]:


# these tests are worth 2 mark
random.seed(112211)
testRules = [
    ('A', 'B', 0.33),
    ('B', 'C', 0.75)
]
assert evolveOne('A', testRules) == 'A'
assert evolveOne('A', testRules) == 'A'
assert evolveOne('A', testRules) == 'A'
assert evolveOne('A', testRules) == 'A'
assert evolveOne('A', testRules) == 'B'

assert evolveOne('B', testRules) == 'B'
assert evolveOne('B', testRules) == 'C'
assert evolveOne('B', testRules) == 'C'
assert evolveOne('B', testRules) == 'C'
assert evolveOne('B', testRules) == 'C'

# with no rules there should be no change
assert evolveOne('C', testRules) == 'C'


# Now implement a function that takes a list of states and transition them according to the rules passed as argument. This function should return a new vector of states, it should not modify the state passed as an argument!

# In[7]:


def evolveMany(states, rules):
    newState = []
    initial_states = [rule[0] for rule in rules]
    final_states = [rule[1] for rule in rules]
    probabilities = [rule[2] for rule in rules]

    for state in states:
        if state in initial_states:
            rule_index = initial_states.index(state)
            if has_transitioned(probabilities[rule_index]):
                newState.append(final_states[rule_index])
            else:
                newState.append(state)
        else:
            newState.append(state)

    return newState


# In[8]:


# these tests are worth 1 mark
random.seed(112287)
testRules = [
    ('A', 'B', 0.33),
    ('B', 'C', 0.75)
]
initialTestArray = ['A','B','C']*5
evolvedTest = evolveMany(initialTestArray, testRules)
targetArray = ['B', 'C', 'C', 'A', 'C', 'C', 'A', 'B', 'C', 'A', 'C', 'C', 'B', 'C', 'C'] 
assert evolvedTest == targetArray
# checks the initial array is left unchanged
assert initialTestArray == ['A','B','C']*5


# Define a function that evolves a system that starts with initial amounts `NA`, `NB` and `NC` of $A$, $B$ and $C$ nuclei and evolved it in `n_timestep` from time $t=0$ to $t=t_{max}$. The function should return three arrays, one for each atom type, of the number of nuclei of that type at each time step. Each array should contain `n_timestep+1` elements including the initial amount. 
#  

# In[9]:


def evolve_system(NA, NB, NC, rules, n_step):

    state = (['A'] * NA) + (['B'] * NB) + (['C'] * NC)
    n_types = len(state)

    A_count = numpy.empty(n_step + 1, dtype=int)
    B_count = numpy.empty(n_step + 1, dtype=int)
    C_count = numpy.empty(n_step + 1, dtype=int)
    
    A_count[0] = NA
    B_count[0] = NB
    C_count[0] = NC

    for step in range(1, n_step + 1):
        new_state = []
        for i in range(n_types):
            nucleus = state[i]
            rule_found = False
            for rule in rules:
                if nucleus == rule[0]:
                    if random.random() < rule[2]:
                        new_nucleus = rule[1]
                        new_state.append(new_nucleus)
                        rule_found = True
                        break

            if not rule_found:
                new_state.append(nucleus)

        state = new_state

        A_count[step] = state.count('A')
        B_count[step] = state.count('B')
        C_count[step] = state.count('C')

    return A_count, B_count, C_count


# In[10]:


# these tests are worth 2 marks
rules = [
    ('A', 'B', 0.0033),
    ('B', 'C', 0.0075),
    ('C', 'A', 0.009)
    
]

r1, r2, r3 = evolve_system(0,0,250, rules, 17)
assert len(r1) == 18
assert len(r2) == 18
assert len(r3) == 18


# In[13]:


# these tests are worth 2 marks 
testrules = [
    ('A', 'B', 0.086),
    ('B', 'C', 0.075),
    ('C', 'A', 0.19)
    
]

random.seed(9485)
r1, r2, r3 = evolve_system(200,200,200, testrules, 20)
assert (r1 == [200, 213, 233, 250, 258, 251, 266, 263, 259, 260, 265, 259, 256,
        255, 258, 256, 259, 253, 249, 247, 253]).all()
assert (r2 == [200, 198, 201, 206, 205, 214, 214, 212, 216, 221, 225, 234, 236,
        238, 234, 235, 231, 245, 253, 256, 252]).all()
assert (r3 == [200, 189, 166, 144, 137, 135, 120, 125, 125, 119, 110, 107, 108,
        107, 108, 109, 110, 102,  98,  97,  95]).all()


# ## Plotting tasks

# Create a plot with the number of $A$, $B$ and $C$ nuclei, starting with 250 $C$ nuclei and evolving the system for 100 hours using 200 steps and with neutron flux on. Evolve the system for another 100 hours (using 200 steps) without neutron flux (i.e. no transitions from $C$ to $A$).  
# 
# The half life of the $A$ atoms is 10.1 hours, the half life of $B$ nuclei is 15.7 hours and we can caracterise the rate of activation of $C$ into $A$ when the neutron flux is on with and effective half-life of 3.2 hours.
# 
# The plot should have the appropriate labels and legend. [8 marks]    
# 
# 
# 

# In[14]:


nsteps = 200
t_total = 100
t_half_A = 10.1
t_half_B = 15.7
t_half_C = 3.2

p_A = numpy.log(2) / t_half_A
p_B = numpy.log(2) / t_half_B
p_C = numpy.log(2) / t_half_C

rules_with_flux = [('A', 'B', p_A), ('B', 'C', p_B), ('C', 'A', p_C)]
rules_without_flux = [('A', 'B', p_A), ('B', 'C', p_B)]

A_count_flux_on, B_count_flux_on, C_count_flux_on = evolve_system(0, 0, 250, rules_with_flux, nsteps)

A_count_flux_off, B_count_flux_off, C_count_flux_off = evolve_system(A_count_flux_on[-1], B_count_flux_on[-1], C_count_flux_on[-1], rules_without_flux, nsteps)

A_count = numpy.concatenate((A_count_flux_on, A_count_flux_off[1:]))
B_count = numpy.concatenate((B_count_flux_on, B_count_flux_off[1:]))
C_count = numpy.concatenate((C_count_flux_on, C_count_flux_off[1:]))

times = numpy.linspace(0, 2 * t_total, num=2 * nsteps + 1)

plt.plot(times, A_count, label='A')
plt.plot(times, B_count, label='B')
plt.plot(times, C_count, label='C')
plt.xlabel('Time (hours)')
plt.ylabel('Number of Nuclei')
plt.legend()
plt.title('Evolution of A, B, and C Nuclei')


# Run the above simulation 20 times with 200 steps and use the results to calculate an average and the uncertainty on the number of $A$ atoms as a function of time. Use and `errorbar` plot for it. You might be interested in the `numpy.average` and `numpy.std` functions. The plot should have axis labels and a title.  [3 marks]
# 

# In[16]:


nsteps = 200
t_total = 100
t_half_A = 10.1
t_half_B = 15.7
t_half_C = 3.2

nsim = 20
A_counts = []
times = numpy.linspace(0, 2 * t_total, num=2 * nsteps + 1)

for i in range(nsim):
    A_count_flux_on, _, _ = evolve_system(0, 0, 250, rules_with_flux, nsteps)
    A_count_flux_off, _, _ = evolve_system(A_count_flux_on[-1], 0, 0, rules_without_flux, nsteps)
    A_count = numpy.concatenate((A_count_flux_on, A_count_flux_off[1:]))
    A_counts.append(A_count)

A_counts = numpy.array(A_counts)
A_mean = numpy.average(A_counts, axis=0)
A_std = numpy.std(A_counts, axis=0)

plt.errorbar(times, A_mean, yerr=A_std, label='A')
plt.xlabel('Time (hours)')
plt.ylabel('Number of Nuclei')
plt.legend()
plt.title('Evolution of A Nuclei (20 Simulations)')
plt.show()


# In[ ]:




